{"openapi":"3.1.0","info":{"title":"Flowchem - ","description":"Flowchem is a library to control instruments and devices commonly found in chemistry labs via an interoperable web API.","license":{"name":"MIT License","url":"https://opensource.org/licenses/MIT"},"version":"1.1.0.post1"},"paths":{"/mybox/":{"get":{"tags":["mybox"],"summary":"Get Device Info","operationId":"get_device_info_mybox__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceInfo"}}}}}}},"/mybox/adc/":{"get":{"tags":["mybox","mybox"],"summary":"Get Component Info","description":"Retrieve the component's metadata.\n\nThis endpoint provides information about the component, such as its name and associated hardware device.\n\nReturns:\n--------\nComponentInfo\n    Metadata about the component.","operationId":"get_component_info_mybox_adc__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ComponentInfo"}}}}}}},"/mybox/adc/read":{"get":{"tags":["mybox","mybox"],"summary":"Read","description":"Read ADC (Analog-to-Digital Converter) channel (1 to 8).\n\nReturns:\n    voltage value in volts.","operationId":"read_mybox_adc_read_get","parameters":[{"name":"channel","in":"query","required":true,"schema":{"type":"string","title":"Channel"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"number","title":"Response Read Mybox Adc Read Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/mybox/adc/read_all":{"get":{"tags":["mybox","mybox"],"summary":"Read All","description":"Read all ADC (Analog-to-Digital Converter) channels.\n\nReturns:\n    dict[str, float]: Mapping of channel IDs (e.g. \"ADC1\", \"ADC2\") to measured\n    voltage values in volts.","operationId":"read_all_mybox_adc_read_all_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":{"type":"number"},"type":"object","title":"Response Read All Mybox Adc Read All Get"}}}}}}},"/mybox/dac/":{"get":{"tags":["mybox","mybox"],"summary":"Get Component Info","description":"Retrieve the component's metadata.\n\nThis endpoint provides information about the component, such as its name and associated hardware device.\n\nReturns:\n--------\nComponentInfo\n    Metadata about the component.","operationId":"get_component_info_mybox_dac__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ComponentInfo"}}}}}}},"/mybox/dac/power-on":{"put":{"tags":["mybox","mybox"],"summary":"Power On","description":"Turn power on.","operationId":"power_on_mybox_dac_power_on_put","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/mybox/dac/power-off":{"put":{"tags":["mybox","mybox"],"summary":"Power Off","description":"Turn off power.","operationId":"power_off_mybox_dac_power_off_put","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/mybox/dac/channel":{"put":{"tags":["mybox","mybox"],"summary":"Set Channel","description":"Set the DAC output voltage for a given channel.\n\nArgs:\n    channel (str, optional): DAC channel index. Must be a digit string\n        (e.g., \"1\", \"2\"). Defaults to \"1\".\n    value (str, optional): Target voltage with unit, expressed as a string\n        parsable by the unit registry (e.g., \"2.5 V\", \"500 mV\").\n        Defaults to \"0 V\".\n\nReturns:\n    bool:\n        - True if the voltage command was successfully sent to the hardware.\n        - False if the channel argument is invalid or if the value cannot be parsed.\n\nNotes:\n    - The channel must be convertible to an integer.\n    - The voltage string is parsed using the unit registry (`ureg`).\n    - Any parsing or hardware errors are logged via `logger`.","operationId":"set_channel_mybox_dac_channel_put","parameters":[{"name":"channel","in":"query","required":false,"schema":{"type":"string","default":"1","title":"Channel"}},{"name":"value","in":"query","required":false,"schema":{"type":"string","default":"0 V","title":"Value"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"boolean","title":"Response Set Channel Mybox Dac Channel Put"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"get":{"tags":["mybox","mybox"],"summary":"Read Channel","description":"Read the DAC output of a channel.\n\nArgs:\n    channel (str): DAC channel index (1 or 2).\n\nReturns:\n    float: DAC output in volts.","operationId":"read_channel_mybox_dac_channel_get","parameters":[{"name":"channel","in":"query","required":true,"schema":{"type":"string","title":"Channel"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"number","title":"Response Read Channel Mybox Dac Channel Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/mybox/relay/":{"get":{"tags":["mybox","mybox"],"summary":"Get Component Info","description":"Retrieve the component's metadata.\n\nThis endpoint provides information about the component, such as its name and associated hardware device.\n\nReturns:\n--------\nComponentInfo\n    Metadata about the component.","operationId":"get_component_info_mybox_relay__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ComponentInfo"}}}}}}},"/mybox/relay/power-on":{"put":{"tags":["mybox","mybox"],"summary":"Power On","description":"Set the state ON of a single relay channel.\n\nArgs:\n    channel (str): Relay channel index (1–32).\n\nReturns:\n    bool: True if the device acknowledged the command, False otherwise.","operationId":"power_on_mybox_relay_power_on_put","parameters":[{"name":"channel","in":"query","required":true,"schema":{"type":"string","title":"Channel"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"boolean","title":"Response Power On Mybox Relay Power On Put"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/mybox/relay/power-off":{"put":{"tags":["mybox","mybox"],"summary":"Power Off","description":"Set the state OFF of a single relay channel.\n\nArgs:\n    channel (str): Relay channel index (1–32).\n\nReturns:\n    bool: True if the device acknowledged the command, False otherwise.","operationId":"power_off_mybox_relay_power_off_put","parameters":[{"name":"channel","in":"query","required":true,"schema":{"type":"string","title":"Channel"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"boolean","title":"Response Power Off Mybox Relay Power Off Put"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/mybox/relay/channel_setpoint":{"get":{"tags":["mybox","mybox"],"summary":"Read Channel Setpoint","description":"Read the current relay state of a single channel.\n\nEach channel corresponds to one relay (1–32), organized in four ports:\n- Port A → channels 1–8\n- Port B → channels 9–16\n- Port C → channels 17–24\n- Port D → channels 25–32\n\nChannel states:\n    * 0 → OFF\n    * 1 → Half power (power1 only, ~12 V)\n    * 2 → Full power (power1 + power2, ~24 V)\n\nArgs:\n    channel (str): Relay channel index (1–32).\n\nReturns:\n    int | bool:\n        - 0, 1, or 2 → valid relay state.\n        - None → if the channel index is invalid.","operationId":"read_channel_setpoint_mybox_relay_channel_setpoint_get","parameters":[{"name":"channel","in":"query","required":true,"schema":{"type":"string","title":"Channel"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Response Read Channel Setpoint Mybox Relay Channel Setpoint Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/mybox/relay/channel":{"put":{"tags":["mybox","mybox"],"summary":"Set Channel","description":"Set the state of a single relay channel.\n\nArgs:\n    channel (str): Relay channel index (1–32).\n    value (str): Desired channel state:\n        * 0 → OFF\n        * 1 → Half power (~12 V)\n        * 2 → Full power (~24 V)\n    keep_port_status (str, optional):\n        If true (default), preserves the state of other channels\n        in the same port (module).\n        If false, all other channels in the port are reset to 0.\n    switch_to_low_after (float, optional):\n        If >0 and value=2, automatically switches the channel\n        to 1 (half power) after the given delay in seconds.\n        Useful to reduce heat generation.\n        Default = -1 (disabled).\n\nReturns:\n    bool: True if the device acknowledged the command, False otherwise.","operationId":"set_channel_mybox_relay_channel_put","parameters":[{"name":"channel","in":"query","required":true,"schema":{"type":"string","title":"Channel"}},{"name":"value","in":"query","required":true,"schema":{"type":"string","title":"Value"}},{"name":"keep_port_status","in":"query","required":false,"schema":{"type":"string","default":"true","title":"Keep Port Status"}},{"name":"switch_to_low_after","in":"query","required":false,"schema":{"type":"number","default":-1,"title":"Switch To Low After"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"boolean","title":"Response Set Channel Mybox Relay Channel Put"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/mybox/relay/read_channels_modules":{"get":{"tags":["mybox","mybox"],"summary":"Read Channels Modules","description":"Query the relay states of all channels in modules.\n\nReturns:\n    dict[str, list[int]]: A dictionary mapping port modules IDs (\"a\", \"b\", \"c\", \"d\")\n    to lists of 8 integers each.\n    Each integer represents the current state of one of the 8 channels:\n        * 0 → OFF\n        * 1 → Half power (~12 V)\n        * 2 → Full power (~24 V)\n\nExample:\n    {\n        \"a\": [0, 1, 2, 0, 0, 1, 0, 0],\n        \"b\": [...],\n        \"c\": [...],\n        \"d\": [...]\n    }","operationId":"read_channels_modules_mybox_relay_read_channels_modules_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":{"items":{"type":"integer"},"type":"array"},"type":"object","title":"Response Read Channels Modules Mybox Relay Read Channels Modules Get"}}}}}}},"/mybox/relay/port_module":{"put":{"tags":["mybox","mybox"],"summary":"Set Port Module","description":"Set the relay states of all 8 channels in a port module.\n\nChannel states:\n    * 0 → OFF\n    * 1 → Half power (~12 V)\n    * 2 → Full power (~24 V)\n\nArgs:\n    values (str): List of up to 8 integers (0, 1, or 2).\n        - Example: \"00010012\"\n        - If shorter than 8, remaining channels are set to 0.\n        - If longer than 8, extra values are ignored.\n    switch_to_low_after (float, optional):\n        If >0, channels set to 2 (full power) are automatically\n        reduced to 1 (half power) after the given delay in seconds.\n        Default = -1 (disabled).\n    port (str, optional): Port identifier (\"a\", \"b\", \"c\", or \"d\").\n        Default = \"a\".\n\nReturns:\n    bool: True if the device acknowledged the command, False otherwise.","operationId":"set_port_module_mybox_relay_port_module_put","parameters":[{"name":"values","in":"query","required":true,"schema":{"type":"string","title":"Values"}},{"name":"switch_to_low_after","in":"query","required":false,"schema":{"type":"number","default":-1,"title":"Switch To Low After"}},{"name":"port","in":"query","required":false,"schema":{"type":"string","default":"a","title":"Port"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"ComponentInfo":{"properties":{"name":{"type":"string","title":"Name","default":""},"parent_device":{"type":"string","title":"Parent Device","default":""},"type":{"type":"string","title":"Type","default":""},"corresponding_class":{"items":{"type":"string"},"type":"array","title":"Corresponding Class","default":[]},"owl_subclass_of":{"items":{"type":"string"},"type":"array","title":"Owl Subclass Of","default":["http://purl.obolibrary.org/obo/OBI_0000968"]}},"type":"object","title":"ComponentInfo","description":"Metadata associated with flowchem components."},"DeviceInfo":{"properties":{"manufacturer":{"type":"string","title":"Manufacturer","default":""},"model":{"type":"string","title":"Model","default":""},"version":{"type":"string","title":"Version","default":""},"serial_number":{"anyOf":[{"type":"string"},{"type":"integer"}],"title":"Serial Number","default":"unknown"},"components":{"additionalProperties":{"type":"string","minLength":1,"format":"uri"},"type":"object","title":"Components","default":{}},"backend":{"type":"string","title":"Backend","default":"flowchem v. 1.1.0.post1"},"authors":{"items":{"type":"string","format":"name-email"},"type":"array","title":"Authors","default":[]},"additional_info":{"additionalProperties":true,"type":"object","title":"Additional Info","default":{}}},"type":"object","title":"DeviceInfo","description":"Metadata associated with hardware devices."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}