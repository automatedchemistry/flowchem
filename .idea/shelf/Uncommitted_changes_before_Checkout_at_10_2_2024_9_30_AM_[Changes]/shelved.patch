Index: src/flowchem/components/flowchem_component.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from __future__ import annotations\r\nfrom typing import TYPE_CHECKING\r\n\r\nfrom typing import Callable\r\nfrom functools import wraps\r\n\r\nfrom fastapi import APIRouter\r\nfrom loguru import logger\r\n\r\nfrom flowchem.components.component_info import ComponentInfo\r\n\r\nif TYPE_CHECKING:\r\n    from flowchem.devices.flowchem_device import FlowchemDevice\r\n\r\n\r\n# Define a decorator that logs without altering the endpoint's function signature\r\ndef log_usage(func: Callable):\r\n    @wraps(func)  # This ensures FastAPI can introspect the function correctly\r\n    async def wrapper(*args, **kwargs):\r\n        logger.info(f\"Endpoint {func.__name__} called with args: {args}, kwargs: {kwargs}\")\r\n        result = await func(*args, **kwargs)\r\n        logger.info(f\"Endpoint {func.__name__} returned: {result}\")\r\n        return result\r\n    return wrapper\r\n\r\n\r\nclass FlowchemComponent:\r\n    \"\"\"\r\n    A base class for Flowchem components that integrates with a hardware device.\r\n\r\n    This class provides the foundational setup for creating components that can\r\n    communicate with hardware devices and expose API routes for interacting with these components.\r\n\r\n    Attributes:\r\n    -----------\r\n    name : str\r\n        The name of the component.\r\n    hw_device : FlowchemDevice\r\n        The hardware device instance associated with this component.\r\n    component_info : ComponentInfo\r\n        Metadata about the component.\r\n    _router : APIRouter\r\n        The API router for the component to define HTTP endpoints.\r\n\r\n    Methods:\r\n    --------\r\n    add_api_route(path: str, endpoint: Callable, **kwargs):\r\n        Add an API route to the component's router.\r\n    get_component_info() -> ComponentInfo:\r\n        Retrieve the component's metadata.\r\n    \"\"\"\r\n    def __init_subclass__(cls, **kwargs):\r\n        super().__init_subclass__(**kwargs)\r\n        for attr_name, attr_value in cls.__dict__.items():\r\n            if callable(attr_value) and attr_name != \"__init__\":\r\n                setattr(cls, attr_name, log_usage(attr_value))\r\n\r\n    def __init__(self, name: str, hw_device: FlowchemDevice) -> None:\r\n        \"\"\"\r\n        Initialize the FlowchemComponent with a name and associated hardware device.\r\n\r\n        Parameters:\r\n        -----------\r\n        name : str\r\n            The name assigned to this component.\r\n        hw_device : FlowchemDevice\r\n            The hardware device instance associated with this component.\r\n        \"\"\"\r\n        self.name = name\r\n        self.hw_device = hw_device\r\n        self.component_info = ComponentInfo(\r\n            name=name,\r\n            parent_device=self.hw_device.name,\r\n        )\r\n\r\n        # Initialize router\r\n        self._router = APIRouter(\r\n            prefix=f\"/{self.component_info.parent_device}/{name}\",\r\n            tags=[self.component_info.parent_device],\r\n        )\r\n        self.add_api_route(\r\n            \"/\",\r\n            self.get_component_info,\r\n            methods=[\"GET\"],\r\n            response_model=ComponentInfo,\r\n        )\r\n\r\n    @property\r\n    def router(self):\r\n        \"\"\"\r\n        Return the API router.\r\n\r\n        This serves as a hook for subclasses to add their specific routes.\r\n\r\n        Returns:\r\n        --------\r\n        APIRouter\r\n            The API router instance.\r\n        \"\"\"\r\n        return self._router\r\n\r\n    def add_api_route(self, path: str, endpoint: Callable, **kwargs):\r\n        \"\"\"\r\n        Add an API route to the component's router.\r\n\r\n        This method allows subclasses to define their own API endpoints.\r\n\r\n        Parameters:\r\n        -----------\r\n        path : str\r\n            The URL path for the API route.\r\n        endpoint : Callable\r\n            The function to be called when the route is accessed.\r\n        kwargs : dict\r\n            Additional arguments to configure the route.\r\n        \"\"\"\r\n        if kwargs[\"methods\"][0] == \"PUT\":\r\n            self.component_info.put_methods[path[1:]] = endpoint.__name__\r\n        if kwargs[\"methods\"][0] == \"GET\" and path != \"/\":\r\n            self.component_info.get_methods[path[1:]] = endpoint.__name__\r\n\r\n        logger.debug(f\"Adding route {path} for router of {self.name}\")\r\n\r\n        self._router.add_api_route(path, endpoint, **kwargs)\r\n\r\n    def get_component_info(self) -> ComponentInfo:\r\n        \"\"\"\r\n        Retrieve the component's metadata.\r\n\r\n        This endpoint provides information about the component, such as its name and associated hardware device.\r\n\r\n        Returns:\r\n        --------\r\n        ComponentInfo\r\n            Metadata about the component.\r\n        \"\"\"\r\n        return self.component_info\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/flowchem/components/flowchem_component.py b/src/flowchem/components/flowchem_component.py
--- a/src/flowchem/components/flowchem_component.py	
+++ b/src/flowchem/components/flowchem_component.py	
@@ -50,6 +50,26 @@
         Retrieve the component's metadata.
     """
     def __init_subclass__(cls, **kwargs):
+        """
+        Customize the creation of subclasses for FlowchemComponent.
+
+        This method is automatically called when a subclass of FlowchemComponent is created.
+        It iterates through the subclass's attributes, and for any callable method
+        (excluding the constructor), it wraps the method with a `log_usage` function.
+        This is used to add logging or tracking functionality to methods in subclasses.
+
+        Parameters:
+        -----------
+        cls : type
+            The class being created (the subclass).
+        **kwargs : dict
+            Any additional arguments passed during subclass creation.
+
+        Example:
+        --------
+        When you create a subclass of FlowchemComponent, this method will automatically
+        wrap all its methods (except `__init__`) with logging functionality.
+        """
         super().__init_subclass__(**kwargs)
         for attr_name, attr_value in cls.__dict__.items():
             if callable(attr_value) and attr_name != "__init__":
Index: src/flowchem/devices/virtual/chronology_component.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flowchem.components.flowchem_component import FlowchemComponent\r\nfrom flowchem.devices.flowchem_device import FlowchemDevice\r\nfrom flowchem import __version__\r\nfrom loguru import logger\r\nfrom pathlib import Path\r\nimport os\r\n\r\nfrom typing import TYPE_CHECKING\r\nimport time\r\n\r\nif TYPE_CHECKING:\r\n    from flowchem.devices.virtual import Chronology\r\n\r\n\r\nclass Chronology_Component(FlowchemComponent):\r\n    \"\"\"\r\n    A component class that integrates the Chronology device with the Flowchem framework and provides an API for logging.\r\n\r\n    This class extends FlowchemComponent to represent a Flowchem device along with additional functionality,\r\n    such as the ability to set up logging through a specified API route.\r\n\r\n    Attributes:\r\n        name (str): The name of the component.\r\n        hw_device (FlowchemDevice): The hardware device instance associated with this component.\r\n\r\n    Methods:\r\n        __init__(self, name: str, hw_device: FlowchemDevice):\r\n            Initializes the Chronology_Component class by setting up the API route for logging and passing\r\n            the device attributes to the base class.\r\n\r\n        async set_logging(self, path: str):\r\n            Creates a directory at the specified path if it doesn't exist and sets up logging.\r\n            A new log file will be generated in the specified path with the filename 'log.log'.\r\n\r\n            Args:\r\n                path (str): The file path where the log directory should be created.\r\n\r\n            Raises:\r\n                OSError: If the directory creation fails.\r\n    \"\"\"\r\n\r\n    def __init__(self, name: str, hw_device):\r\n        \"\"\"\r\n        Initializes the Chronology_Component instance.\r\n\r\n        Args:\r\n            name (str): The name of the component.\r\n            hw_device (FlowchemDevice): The hardware device associated with this component.\r\n\r\n        The constructor also registers a new API route, \"/set_logging\", to allow external clients\r\n        to configure logging to a specified directory.\r\n        \"\"\"\r\n        hw_device: Chronology\r\n        super().__init__(name, hw_device)\r\n        self.add_api_route(\"/set_logging\", self.set_logging, methods=[\"PUT\"])\r\n\r\n    async def set_logging(self, path: str, experiment_id: str | int):\r\n        \"\"\"\r\n        Sets up logging to a file in the provided directory.\r\n\r\n        This method creates a directory (if it doesn't exist) at the provided `path`, and sets up\r\n        logging using Loguru. The log file will be saved at `path/log.log` with a log level of \"INFO\".\r\n\r\n        Args:\r\n            path (str): The directory where the log file should be created.\r\n            experiment_id (str | int): The experimental id or name to be identify.\r\n\r\n        Raises:\r\n            OSError: If the directory cannot be created.\r\n        \"\"\"\r\n        os.mkdir(path)\r\n\r\n        current_time = time.localtime()\r\n\r\n        # Extract the components\r\n        year = current_time.tm_year\r\n        month = current_time.tm_mon\r\n        day = current_time.tm_mday\r\n        hour = current_time.tm_hour\r\n        minute = current_time.tm_min\r\n        second = current_time.tm_sec\r\n\r\n        devices_used = [dev.__class__.__name__ for dev in self.hw_device.flowchem.devices]\r\n\r\n        msg = (f\"The experiment starts in {year}-{month:02d}-{day:02d} at {hour:02d}:{minute:02d}:{second:02d}\"\r\n               f\" using flowchem version {__version__}. It used the \"\r\n               f\"devices: {devices_used} configured through the specifications below:\\n\\n\"\r\n               f\"{self.hw_device.config_inf}\\n\\n\"\r\n               f\"Client name/number: {self.hw_device.flowchem.mdns.mdns_addresses}. Name/id of the experiment:\"\r\n               f\" {experiment_id}\")\r\n\r\n        with open(f\"{path}/information.txt\", 'w') as file:\r\n            file.write(msg)\r\n        logger.add(Path(path + \"/log.log\"), level=\"INFO\")\r\n
===================================================================
diff --git a/src/flowchem/devices/virtual/chronology_component.py b/src/flowchem/devices/virtual/chronology_component.py
--- a/src/flowchem/devices/virtual/chronology_component.py	
+++ b/src/flowchem/devices/virtual/chronology_component.py	
@@ -54,7 +54,7 @@
         super().__init__(name, hw_device)
         self.add_api_route("/set_logging", self.set_logging, methods=["PUT"])
 
-    async def set_logging(self, path: str, experiment_id: str | int):
+    async def set_logging(self, path: str = "logging", experiment_id: str | int = 1):
         """
         Sets up logging to a file in the provided directory.
 
